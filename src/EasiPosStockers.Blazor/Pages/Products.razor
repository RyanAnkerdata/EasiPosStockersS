@page "/products"

@attribute [Authorize(EasiPosStockersPermissions.Products.Default)]
@using EasiPosStockers.Products
@using EasiPosStockers.Localization
@using EasiPosStockers.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using EasiPosStockers.Permissions
@using Microsoft.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@inherits EasiPosStockersComponentBase
@inject IProductsAppService ProductsAppService

@inject IUiMessageService UiMessageService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Products"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
@*//<suite-custom-code-block-1>*@
@*//</suite-custom-code-block-1>*@
        <Form id="ProductSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="ProductSearchForm" Clicked="GetProductsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        
        <Blazorise.Row Class="mt-3 mb-3"> 
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Blazorise.Row>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Blazorise.Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Description"]</FieldLabel>
                        <TextEdit Text="@Filter.Description" TextChanged="@OnDescriptionChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["ProductName"]</FieldLabel>
                        <TextEdit Text="@Filter.ProductName" TextChanged="@OnProductNameChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["CostCentre"]</FieldLabel>
                        <Select TValue="Guid?"
		                    SelectedValue="@Filter.CostCentreId"
		                    SelectedValueChanged="@OnCostCentreIdChangedAsync">
                                <SelectItem></SelectItem>
                                @foreach(var item in CostCentres)
                                {
	                                <SelectItem TValue="Guid?" Value="@item.Id">
		                                @item.DisplayName
	                                </SelectItem>
                                }
                        </Select>                       
                    </Field>
                </Column>
            </Blazorise.Row>
            @*//<suite-custom-code-block-2>*@
            @*//</suite-custom-code-block-2>*@
        </div>
        @*//<suite-custom-code-block-3>*@
        @*//</suite-custom-code-block-3>*@
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="ProductWithNavigationPropertiesDto"
                  Data="ProductList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                
                <DataGridEntityActionsColumn TItem="ProductWithNavigationPropertiesDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="ProductWithNavigationPropertiesDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="ProductWithNavigationPropertiesDto"
                                          Visible="@CanEditProduct"
                                          Clicked="async () => await OpenEditProductModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="ProductWithNavigationPropertiesDto"
                                          Visible="@CanDeleteProduct"
                                          Clicked="() => DeleteProductAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
@*//<suite-custom-code-block-4>*@
@*//</suite-custom-code-block-4>*@
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.Description"
                      Caption="@L["Description"]">
              </DataGridColumn>

              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.ProductName"
                      Caption="@L["ProductName"]">
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateProductModal" Closing="@CreateProductModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        @*//<suite-custom-code-block-5>*@
        @*//</suite-custom-code-block-5>*@
        <Form id="CreateProductForm">
            <ModalHeader>
                <ModalTitle>@L["NewProduct"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateProductModalAsync" />
                </ModalHeader>
                <ModalBody>
                            <Validations @ref="@NewProductValidations"
                                         Mode="ValidationMode.Auto"
                                         Model="@NewProduct"
                                         ValidateOnLoad="false">
                                    <Validation>
                                        <Field>
                                            <FieldLabel>@L["Description"] *</FieldLabel>
                                        <TextEdit @bind-Text="@NewProduct.Description" MaxLength="ProductConsts.DescriptionMaxLength">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Field>
                                </Validation>

                                <Validation>
                                    <Field>
                                        <FieldLabel>@L["ProductName"] *</FieldLabel>
                                        <TextEdit @bind-Text="@NewProduct.ProductName" MaxLength="ProductConsts.ProductNameMaxLength">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Field>
                                </Validation>
                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>
                                <FieldLabel>@L["CostCentreAllocations"]</FieldLabel>

                                            <Autocomplete Data="@CostCentres"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetCostCentreLookupAsync"
                                                          @bind-SelectedValue="@SelectedCostCentreId"
                                                          @bind-SelectedText="@SelectedCostCentreText"
                                                          Placeholder="&#8212;" />
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Small" Clicked="AddCostCentre">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>

                                @if (SelectedCostCentres.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["CostCentreName"]</Span></TableHeaderCell>
                                            </TableHeader>
                                            <TableBody>
                                                @foreach (var costCentre in SelectedCostCentres)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@costCentre.DisplayName</Span></TableRowCell>
                                                        <TableRowCell>
                                                            <span class="btn btn-danger btn-sm float-end"
                                                                  @onclick="() => SelectedCostCentres.RemoveAll(s => s.Id == costCentre.Id)">
                                                                <Icon Class="fa fa-trash"></Icon>
                                                            </span>
                                                        </TableRowCell>
                                                    </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                        </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateProductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateProductForm" Clicked="CreateProductAsync" />
                @*//<suite-custom-code-block-6>*@
                @*//</suite-custom-code-block-6>*@
            </ModalFooter>
        </Form>
        @*//<suite-custom-code-block-7>*@
        @*//</suite-custom-code-block-7>*@
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditProductModal" Closing="@EditProductModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        @*//<suite-custom-code-block-8>*@
        @*//</suite-custom-code-block-8>*@
        <Form id="EditProductForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                    <CloseButton Clicked="CloseEditProductModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditingProductValidations"
                                    Mode="ValidationMode.Auto"
                                    Model="@EditingProduct"
                                    ValidateOnLoad="false">

                            <Validation>
                                <Field>
                                    <FieldLabel>@L["Description"] *</FieldLabel>
                                <TextEdit @bind-Text="@EditingProduct.Description" MaxLength="ProductConsts.DescriptionMaxLength">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["ProductName"] *</FieldLabel>
                                <TextEdit @bind-Text="@EditingProduct.ProductName" MaxLength="ProductConsts.ProductNameMaxLength">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>

                        <Row>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Field>

                                    <Autocomplete Data="@CostCentres"
                                                    TItem="LookupDto<Guid>"
                                                    TValue="string"
                                                    TextField="@((item) => item.DisplayName)"
                                                    ValueField="@((item) => item.Id.ToString())"
                                                    SearchChanged="@GetCostCentreLookupAsync"
                                                    @bind-SelectedValue="@SelectedCostCentreId"
                                                    @bind-SelectedText="@SelectedCostCentreText"
                                                    Placeholder="&#8212;" />
                                </Field>
                            </Column>

                            <Column ColumnSize="ColumnSize.Is3">
                                <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Small" Clicked="AddCostCentre">
                                    <Icon class="fa fa-plus"></Icon> @L["Add"]
                                </Button>
                            </Column>
                        </Row>

                        @if (SelectedCostCentres.Any())
                        {
                            <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                <TableHeader>
                                    <TableHeaderCell><Span class="float-start">@L["CostCentreName"]</Span></TableHeaderCell>
                                    </TableHeader>
                                    <TableBody>
                                        @foreach (var costCentre in SelectedCostCentres)
                                    {
                                        <TableRow>
                                            <TableRowCell><Span class="float-start">@costCentre.DisplayName</Span></TableRowCell>
                                                <TableRowCell>
                                                    <span class="btn btn-danger btn-sm float-end"
                                                            @onclick="() => SelectedCostCentres.RemoveAll(s => s.Id == costCentre.Id)">
                                                        <Icon Class="fa fa-trash"></Icon>
                                                    </span>
                                                </TableRowCell>
                                            </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        }
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditProductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditProductForm" Clicked="UpdateProductAsync" />
                @*//<suite-custom-code-block-9>*@
                @*//</suite-custom-code-block-9>*@
            </ModalFooter>
        </Form>
        @*//<suite-custom-code-block-10>*@
        @*//</suite-custom-code-block-10>*@
    </ModalContent>
</Modal>


<Card>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
        <style>
            body {
                font-family: Arial, sans-serif;
            }

            #treeview {
                max-width: 300px;
            }

            .tree-node {
                list-style-type: none;
                margin: 0;
                padding: 0;
            }

            .tree-node-item {
                position: relative;
                padding: 8px;
                cursor: pointer;
            }

                .tree-node-item i {
                    margin-right: 8px;
                }

            .tree-node-list {
                position: relative;
                padding-left: 20px;
                display: none;
            }

                .tree-node-list.visible {
                    display: block;
                }

            .tree-node-arrow {
                position: absolute;
                left: 0;
                top: 50%;
                transform: translateY(-50%);
            }
        </style>
    </head>
    <body>

        <div id="treeview">
            <ul class="tree-node">
                <li class="tree-node-item" onclick="toggleNode(this)">
                    <i class="fas fa-folder"></i>
                    <span class="tree-node-arrow"><i class="fas fa-caret-right"></i></span>
                    Node 1
                    <ul class="tree-node-list">
                        <li class="tree-node-item" onclick="toggleNode(this)">
                            <i class="fas fa-file"></i> Subnode 1.1
                        </li>
                        <li class="tree-node-item">
                            <i class="fas fa-file"></i> Subnode 1.2
                        </li>
                    </ul>
                </li>
                <li class="tree-node-item" onclick="toggleNode(this)">
                    <i class="fas fa-folder"></i>
                    <span class="tree-node-arrow"><i class="fas fa-caret-right"></i></span>
                    Node 2
                    <ul class="tree-node-list">
                        <li class="tree-node-item">
                            <i class="fas fa-file"></i> Subnode 2.1
                        </li>
                        <li class="tree-node-item">
                            <i class="fas fa-file"></i> Subnode 2.2
                        </li>
                    </ul>
                </li>
            </ul>
        </div>

        <script>
            function toggleNode(node) {
                const nodeList = node.querySelector('.tree-node-list');
                nodeList.classList.toggle('visible');

                const arrow = node.querySelector('.tree-node-arrow i');
                arrow.classList.toggle('fa-caret-down');
                arrow.classList.toggle('fa-caret-right');
            }
        </script>

    </body>
</html>
</Card>