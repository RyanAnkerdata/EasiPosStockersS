@page "/products"

@attribute [Authorize(EasiPosStockersPermissions.Products.Default)]
@using EasiPosStockers.Products
@using EasiPosStockers.Localization
@using EasiPosStockers.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using EasiPosStockers.Permissions
@using Microsoft.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@inherits EasiPosStockersComponentBase
@inject IProductsAppService ProductsAppService

@inject IUiMessageService UiMessageService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Products"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
@*//<suite-custom-code-block-1>*@
@*//</suite-custom-code-block-1>*@
        <Form id="ProductSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="ProductSearchForm" Clicked="GetProductsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        
        <Row Class="mt-3 mb-3"> 
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Row>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Description"]</FieldLabel>
                        <TextEdit Text="@Filter.Description" TextChanged="@OnDescriptionChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["ProductName"]</FieldLabel>
                        <TextEdit Text="@Filter.ProductName" TextChanged="@OnProductNameChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["CostCentre"]</FieldLabel>
                        <Select TValue="Guid?"
		SelectedValue="@Filter.CostCentreId"
		SelectedValueChanged="@OnCostCentreIdChangedAsync">

<SelectItem></SelectItem>

@foreach(var item in CostCentres)
{
	<SelectItem TValue="Guid?" Value="@item.Id">
		@item.DisplayName
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
            </Row>
@*//<suite-custom-code-block-2>*@
@*//</suite-custom-code-block-2>*@
        </div>
@*//<suite-custom-code-block-3>*@
@*//</suite-custom-code-block-3>*@
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="ProductWithNavigationPropertiesDto"
                  Data="ProductList"
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                
                <DataGridEntityActionsColumn TItem="ProductWithNavigationPropertiesDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="ProductWithNavigationPropertiesDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="ProductWithNavigationPropertiesDto"
                                          Visible="@CanEditProduct"
                                          Clicked="async () => await OpenEditProductModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="ProductWithNavigationPropertiesDto"
                                          Visible="@CanDeleteProduct"
                                          Clicked="() => DeleteProductAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
@*//<suite-custom-code-block-4>*@
@*//</suite-custom-code-block-4>*@
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.Description"
                      Caption="@L["Description"]">
              </DataGridColumn>

              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.ProductName"
                      Caption="@L["ProductName"]">
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateProductModal" Closing="@CreateProductModal.CancelClosingModalWhenFocusLost" Opened="GetAllCostCentresAsync">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-5>*@
@*//</suite-custom-code-block-5>*@
        <Form id="CreateProductForm">
            <ModalHeader>
                <ModalTitle >@L["NewProduct"]</ModalTitle>
                <CloseButton Clicked="CloseCreateProductModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewProductValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewProduct"
                            ValidateOnLoad="false">
                    
                        <Validation>
                            <Field>
                                <FieldLabel>@L["Description"] *</FieldLabel>
                                <TextEdit @bind-Text="@NewProduct.Description" MaxLength="ProductConsts.DescriptionMaxLength" >
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>

                        <Validation>
                            <Field>
                                <FieldLabel>@L["ProductName"] *</FieldLabel>
                                <TextEdit @bind-Text="@NewProduct.ProductName" MaxLength="ProductConsts.ProductNameMaxLength">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                        </Field>
                        </Validation>
                        <Field>
                            <FieldLabel>@L["CostCentreAllocations"]</FieldLabel>
                            <div style="max-height: 200px; overflow-y: auto;"> <!-- Adjust max-height as needed -->
                                <ListGroup>
                                    @if (CostCentres.Any())
                                    {
                                        @foreach (var costCentre in CostCentres)
                                        {
                                            <ListGroupItem>   
                                                @costCentre.DisplayName
                                                <span class="float-end">
                                                
                                                <Check 
                                                       TValue="bool"
                                                       CheckedChanged="(value) => OnCostCentreChanged(costCentre.Id, value)"
                                                       Style="background-color: lightgray;"
                                                >
                                                </Check>
                                                </span>
                                            </ListGroupItem>
                                        }
                                    }
                                </ListGroup>
                            </div>
                        </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateProductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateProductForm" Clicked="() => CreateProductAsync(CostCentreSelections)" />
@*//<suite-custom-code-block-6>*@
@*//</suite-custom-code-block-6>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-7>*@
@*//</suite-custom-code-block-7>*@
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditProductModal" Closing="@EditProductModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-8>*@
@*//</suite-custom-code-block-8>*@
        <Form id="EditProductForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditProductModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedEditTab" SelectedTabChanged="@OnSelectedEditTabChanged">
                    <Items>
                        <Tab Name="product-edit-tab">@L["Product"].Value</Tab>
                        
                        <Tab Name="costCentres-edit-tab">@L["CostCentres"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@EditingProductValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingProduct"
                            ValidateOnLoad="false">
                     <TabPanel Name="product-edit-tab">
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Description"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingProduct.Description" MaxLength="ProductConsts.DescriptionMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["ProductName"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingProduct.ProductName" MaxLength="ProductConsts.ProductNameMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    </TabPanel>
                            <TabPanel Name="costCentres-edit-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@CostCentres"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetCostCentreLookupAsync"
                                                          @bind-SelectedValue="@SelectedCostCentreId"
                                                          @bind-SelectedText="@SelectedCostCentreText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Small" Clicked="AddCostCentre">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedCostCentres.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["CostCentreName"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var costCentre in SelectedCostCentres)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@costCentre.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedCostCentres.RemoveAll(s => s.Id == costCentre.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditProductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditProductForm" Clicked="UpdateProductAsync" />
@*//<suite-custom-code-block-9>*@
@*//</suite-custom-code-block-9>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-10>*@
@*//</suite-custom-code-block-10>*@
    </ModalContent>
</Modal>



@code {
    Dictionary<Guid, bool> CostCentreSelections = new Dictionary<Guid, bool>();
    
    protected override void OnInitialized() // When the product is first created
    {
        // Reinitialize the dictionary when the component is first created
        CostCentreSelections = new Dictionary<Guid, bool>();
    }

    void OnCostCentreChanged(Guid costCentreId, bool value)
    {
        if (CostCentreSelections.ContainsKey(costCentreId))
        {
            CostCentreSelections[costCentreId] = value;
        }
        else
        {
            CostCentreSelections.Add(costCentreId, value);
        }
        /*
        Console.WriteLine($"CostCentreSelections : ");
        foreach (var kvp in CostCentreSelections)
        {
            Console.WriteLine($"{kvp.Key}: {kvp.Value}");
        }
        */
    }
}